package backend.academy.bot.Bot;

import backend.academy.bot.BotConfig;
import backend.academy.bot.BotState.BotState;
import backend.academy.scrapper.DTO.MovieInfo;
import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.ParseMode;
import com.pengrad.telegrambot.request.SendMessage;
import com.pengrad.telegrambot.response.SendResponse;
import jakarta.annotation.PostConstruct;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Slf4j
@Component
public class Bot {

    private final TelegramBot bot;

    private final WebClient webClient;

    @Getter
    @Setter
    private Map<Long, BotState> userState = new HashMap<>();

    @Getter
    private Map<Long, Map<String, String>> userFilters = new HashMap<>();

    @Autowired
    public Bot(BotConfig botConfig, WebClient webClient) {
        this.bot = new TelegramBot(botConfig.telegramToken());
        this.webClient = webClient;
    }

    @PostConstruct
    public void init() {
        bot.setUpdatesListener(updates -> {
            for (Update update : updates) {
                handleUpdate(update);
            }
            return UpdatesListener.CONFIRMED_UPDATES_ALL;
        });
    }

    private void handleFilmName(long chatId, String filmName) {
        webClient.get()
            .uri("/films/{name}", filmName)
            .retrieve()
            .bodyToMono(new ParameterizedTypeReference<List<MovieInfo>>() {})
            .subscribe(movies -> {
                if (movies.isEmpty()) {
                    sendMessage(chatId, "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                } else {
                    movies.forEach(movie -> {
                        String message = String.format(
                            "üé¨ *%s* (%d)\n\n" +
                                "‚≠ê –†–µ–π—Ç–∏–Ω–≥: %.1f\n" +
                                "üé≠ –ñ–∞–Ω—Ä—ã: %s\n" +
                                "üåç –°—Ç—Ä–∞–Ω—ã: %s\n" +
                                "üìñ –û–ø–∏—Å–∞–Ω–∏–µ: %s\n\n" +
                                "üñº [–ü–æ—Å—Ç–µ—Ä](%s)",
                            movie.getName(),
                            movie.getYear(),
                            movie.getRatingKp() != null ? movie.getRatingKp() : 0.0,
                            String.join(", ", movie.getGenres()),
                            String.join(", ", movie.getCountries()),
                            movie.getDescription() != null ?
                                movie.getDescription().substring(0, Math.min(200, movie.getDescription().length())) + "..." :
                                "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
                            movie.getPosterUrl() != null ? movie.getPosterUrl() : ""
                        );
                        sendMessage(chatId, message);
                    });
                }
                userState.put(chatId, BotState.IDLE);
            }, error -> {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞");
                userState.put(chatId, BotState.IDLE);
            });
    }

    private void handleFilterType(long chatId, String type) {
        Map<String, String> filters = userFilters.get(chatId);
        if (!"skip".equalsIgnoreCase(type)) {
            filters.put("type", type);
        } else {
            filters.remove("type");
        }
        userState.put(chatId, BotState.WAITING_FOR_YEAR);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ (–ø—Ä–∏–º–µ—Ä: 2014-2024) –∏–ª–∏ skip:");
    }

    private void handleFilterYear(long chatId, String year) {
        Map<String, String> filters = userFilters.get(chatId);
        if (!"skip".equalsIgnoreCase(year)) {
            filters.put("year", year);
        } else {
            filters.remove("year");
        }
        userState.put(chatId, BotState.WAITING_FOR_RATING);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥ (–ø—Ä–∏–º–µ—Ä: 6-9) –∏–ª–∏ skip:");
    }

    private void handleFilterRating(long chatId, String rating) {
        Map<String, String> filters = userFilters.get(chatId);
        if (!"skip".equalsIgnoreCase(rating)) {
            filters.put("rating", rating);
        } else {
            filters.remove("rating");
        }
        userState.put(chatId, BotState.WAITING_FOR_GENRE);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∏–ª–∏ skip:");
    }

    private void handleFilterGenre(long chatId, String genre) {
        Map<String, String> filters = userFilters.get(chatId);

        if ("skip".equalsIgnoreCase(genre)) {
            genre = null;
        }

        String finalGenre = genre;
        webClient.get()
            .uri(uriBuilder -> uriBuilder
                .path("/filter")
                .queryParamIfPresent("type", Optional.ofNullable(filters.get("type")))
                .queryParamIfPresent("year", Optional.ofNullable(filters.get("year")))
                .queryParamIfPresent("rating", Optional.ofNullable(filters.get("rating")))
                .queryParamIfPresent("genre", Optional.ofNullable(finalGenre))
                .build())
            .retrieve()
            .bodyToMono(new ParameterizedTypeReference<List<MovieInfo>>() {})
            .subscribe(movies -> {
                if (movies.isEmpty()) {
                    sendMessage(chatId, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî");
                } else {
                    movies.stream()
                        .limit(5)
                        .forEach(movie -> {
                            String message = String.format(
                                "üçø *%s* (%d)\n\n" +
                                    "‚≠ê –†–µ–π—Ç–∏–Ω–≥: %.1f\n" +
                                    "üé≠ –ñ–∞–Ω—Ä—ã: %s\n" +
                                    "üåç –°—Ç—Ä–∞–Ω—ã: %s\n" +
                                    "üìñ –û–ø–∏—Å–∞–Ω–∏–µ: %s\n\n" +
                                    "üñº [–ü–æ—Å—Ç–µ—Ä](%s)",
                                movie.getName(),
                                movie.getYear(),
                                movie.getRatingKp() != null ? movie.getRatingKp() : 0.0,
                                String.join(", ", movie.getGenres()),
                                String.join(", ", movie.getCountries()),
                                movie.getDescription() != null ?
                                    movie.getDescription().substring(0, Math.min(200, movie.getDescription().length())) + "..." :
                                    "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
                                movie.getPosterUrl() != null ? movie.getPosterUrl() : ""
                            );
                            sendMessage(chatId, message);
                        });
                }
                userState.put(chatId, BotState.IDLE);
                userFilters.remove(chatId);
            }, error -> {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");
                userState.put(chatId, BotState.IDLE);
                userFilters.remove(chatId);
            });
    }

    private void handleUpdate(Update update) {
        if (update.message() == null || update.message().text() == null) return;

        String messageText = update.message().text();
        long chatId = update.message().chat().id();

        switch (messageText) {
            case "/help" -> {
                String response = "üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n" +
                    "1. /start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∫—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ\n" +
                    "2. /help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                    "3. /title - –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏\n" +
                    "4. /filters - –ü–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n" +
                    "5. /random - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª\n\n" +
                    "üéØ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –∏ —Å–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–º!";
                sendMessage(chatId, response);
                return;
            }
            case "/start" -> {
                String response = "üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∏–Ω–æ–ü–æ–∏—Å–∫-–±–æ—Ç–∞!\n\n" +
                    "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n" +
                    "üîç –ò—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n" +
                    "üé≤ –ü–æ–ª—É—á–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n" +
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º, –≥–æ–¥—É, —Ä–µ–π—Ç–∏–Ω–≥—É\n\n" +
                    "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!";
                sendMessage(chatId, response);
                return;
            }
            case "/title" -> {
                userState.put(chatId, BotState.WAITING_FOR_FILM_NAME);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞:");
                return;
            }
            case "/filters" -> {
                userState.put(chatId, BotState.WAITING_FOR_TYPE);
                userFilters.put(chatId, new HashMap<>());
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø (—Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª) –∏–ª–∏ skip:");
                return;
            }
            case "/random" -> {
                webClient.get()
                    .uri("/random")
                    .retrieve()
                    .bodyToMono(MovieInfo.class)
                    .subscribe(movie -> {
                        String message = String.format(
                            "üé≤ *–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º*\n\n" +
                                "üé¨ *%s* (%d)\n\n" +
                                "‚≠ê –†–µ–π—Ç–∏–Ω–≥: %.1f\n" +
                                "üé≠ –ñ–∞–Ω—Ä—ã: %s\n" +
                                "üåç –°—Ç—Ä–∞–Ω—ã: %s\n" +
                                "üìñ –û–ø–∏—Å–∞–Ω–∏–µ: %s\n\n" +
                                "üñº [–ü–æ—Å—Ç–µ—Ä](%s)",
                            movie.getName(),
                            movie.getYear(),
                            movie.getRatingKp() != null ? movie.getRatingKp() : 0.0,
                            String.join(", ", movie.getGenres()),
                            String.join(", ", movie.getCountries()),
                            movie.getDescription() != null ?
                                movie.getDescription().substring(0, Math.min(300, movie.getDescription().length())) + "..." :
                                "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
                            movie.getPosterUrl() != null ? movie.getPosterUrl() : ""
                        );
                        sendMessage(chatId, message);
                    }, error -> {
                        sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞");
                    });
                return;
            }
            default -> {
                BotState currentState = userState.getOrDefault(chatId, BotState.IDLE);
                switch (currentState) {
                    case WAITING_FOR_FILM_NAME -> handleFilmName(chatId, messageText);
                    case WAITING_FOR_TYPE -> handleFilterType(chatId, messageText);
                    case WAITING_FOR_YEAR -> handleFilterYear(chatId, messageText);
                    case WAITING_FOR_RATING -> handleFilterRating(chatId, messageText);
                    case WAITING_FOR_GENRE -> handleFilterGenre(chatId, messageText);
                    default -> sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help");
                }
            }
        }

    }

    public void sendMessage(long chatId, String text) {
        SendMessage request = new SendMessage(chatId, text)
            .parseMode(ParseMode.Markdown)
            .disableWebPagePreview(false);
        SendResponse response = bot.execute(request);
        if (!response.isOk()) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {" + response.description() + "}");
        }
    }

}
