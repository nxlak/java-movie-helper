package backend.academy.bot.Bot;

import backend.academy.bot.BotConfig;
import backend.academy.bot.BotState.BotState;
import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.request.SendMessage;
import com.pengrad.telegrambot.response.SendResponse;
import jakarta.annotation.PostConstruct;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@Component
public class Bot {

    private final TelegramBot bot;

    @Getter
    @Setter
    private Map<Long, BotState> userState = new HashMap<>();

    @Getter
    private Map<Long, Map<String, String>> userFilters = new HashMap<>();

    @Autowired
    public Bot(BotConfig botConfig) {
        this.bot = new TelegramBot(botConfig.telegramToken());
    }

    @PostConstruct
    public void init() {
        bot.setUpdatesListener(updates -> {
            for (Update update : updates) {
                handleUpdate(update);
            }
            return UpdatesListener.CONFIRMED_UPDATES_ALL;
        });
    }

    private void handleFilmName(long chatId, String filmName) {
        // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é

        userState.put(chatId, BotState.IDLE);
    }

    private void handleFilterType(long chatId, String type) {
        Map<String, String> filters = userFilters.get(chatId);
        if (!"skip".equalsIgnoreCase(type)) {
            filters.put("type", type);
        }
        userState.put(chatId, BotState.WAITING_FOR_YEAR);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏–ª–∏ skip:");
    }

    private void handleFilterYear(long chatId, String year) {
        Map<String, String> filters = userFilters.get(chatId);
        if (!"skip".equalsIgnoreCase(year)) {
            filters.put("year", year);
        }
        userState.put(chatId, BotState.WAITING_FOR_RATING);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (0-10) –∏–ª–∏ skip:");
    }

    private void handleFilterRating(long chatId, String rating) {
        Map<String, String> filters = userFilters.get(chatId);
        if (!"skip".equalsIgnoreCase(rating)) {
            filters.put("rating", rating);
        }
        userState.put(chatId, BotState.WAITING_FOR_GENRE);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∏–ª–∏ skip:");
    }

    private void handleFilterGenre(long chatId, String genre) {
        Map<String, String> filters = userFilters.get(chatId);
        if (!"skip".equalsIgnoreCase(genre)) {
            filters.put("genre", genre);
        }

        sendMessage(chatId, "–ò—â–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n" + filters);

        userState.put(chatId, BotState.IDLE);
        userFilters.remove(chatId);
    }

    private void handleUpdate(Update update) {
        if (update.message() == null || update.message().text() == null) return;

        String messageText = update.message().text();
        long chatId = update.message().chat().id();

        switch (messageText) {
            case "/help" -> {
                String response = "üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n" +
                    "1. /start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∫—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ\n" +
                    "2. /help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                    "3. /title - –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏\n" +
                    "4. /filters - –ü–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n" +
                    "5. /random - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª\n\n" +
                    "üéØ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –∏ —Å–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–º!";
                sendMessage(chatId, response);
                return;
            }
            case "/start" -> {
                String response = "üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∏–Ω–æ–ü–æ–∏—Å–∫-–±–æ—Ç–∞!\n\n" +
                    "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n" +
                    "üîç –ò—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n" +
                    "üé≤ –ü–æ–ª—É—á–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n" +
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º, –≥–æ–¥—É, —Ä–µ–π—Ç–∏–Ω–≥—É\n\n" +
                    "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!";
                sendMessage(chatId, response);
                return;
            }
            case "/title" -> {
                userState.put(chatId, BotState.WAITING_FOR_FILM_NAME);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞:");
                return;
            }
            case "/filters" -> {
                userState.put(chatId, BotState.WAITING_FOR_TYPE);
                userFilters.put(chatId, new HashMap<>());
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø (—Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª) –∏–ª–∏ skip:");
                return;
            }
            case "/random" -> {
                userState.put(chatId, BotState.IDLE);
                return;
            }
            default -> {
                BotState currentState = userState.getOrDefault(chatId, BotState.IDLE);
                switch (currentState) {
                    case WAITING_FOR_FILM_NAME -> handleFilmName(chatId, messageText);
                    case WAITING_FOR_TYPE -> handleFilterType(chatId, messageText);
                    case WAITING_FOR_YEAR -> handleFilterYear(chatId, messageText);
                    case WAITING_FOR_RATING -> handleFilterRating(chatId, messageText);
                    case WAITING_FOR_GENRE -> handleFilterGenre(chatId, messageText);
                    default -> sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help");
                }
            }
        }

    }

    public void sendMessage(long chatId, String text) {
        SendMessage request = new SendMessage(chatId, text);
        SendResponse response = bot.execute(request);
        if (!response.isOk()) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {" + response.description() + "}");
        }
    }

}
